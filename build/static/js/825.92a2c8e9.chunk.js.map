{"version":3,"file":"static/js/825.92a2c8e9.chunk.js","mappings":"4LAGe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,SAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEA,SAASC,IACP,IAAIC,EACJ,GACEA,EAAOC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,UAC9B,IAAhBJ,EAAKK,QAEd,MAAO,IAAML,EAAKM,cAOpB,OAAoCV,EAAAA,EAAAA,UAAS,GAA7C,eAAOW,EAAP,KAAmBC,EAAnB,KAKA,SAASC,EAAWC,GACJ,UAAVA,EAAEC,IACJC,IACmB,eAAVF,EAAEC,IAoBf,WAGE,GAAIE,EAAKR,SAAWS,EAAU,EAAG,CAC/B,IAAIC,EAAUhB,IACdD,EAASiB,GACTC,GAAQ,SAACC,GAAD,wBAAWA,GAAX,CAAcF,OACtBG,GAAW,SAACD,GAAD,OAAOA,EAAI,UAItBnB,EAASe,EAAKC,EAAU,IACxBI,GAAW,SAACD,GAAD,OAAOA,EAAI,KA/BtBE,GACmB,cAAVT,EAAEC,KAoCTG,EAAU,IACZhB,EAASe,EAAKC,EAAU,IACxBI,GAAW,SAACD,GAAD,OAAOA,EAAI,OA/C1BG,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACdZ,EAAa,UAACa,SAASC,cAAc,2BAAxB,aAAC,EAA4CC,aACzD,KAaHH,EAAAA,EAAAA,YAAU,WAGR,OADAI,OAAOC,iBAAiB,UAAWhB,GAC5B,WACLe,OAAOE,oBAAoB,UAAWjB,MAGvC,IAEH,OAAwBb,EAAAA,EAAAA,UAAS,IAAjC,eAAOiB,EAAP,KAAaG,EAAb,KACA,GAA8BpB,EAAAA,EAAAA,WAAU,GAAxC,eAAOkB,EAAP,KAAgBI,EAAhB,KA0BA,SAASN,IACP,IAAIG,EAAUhB,IACdD,EAASiB,GACTC,GAAQ,SAACC,GAAD,wBAAWA,GAAX,CAAcF,OACtBG,EAAWL,EAAKR,QAGlB,OACE,iBACEsB,UAAU,kBACVC,MAAO,CACLC,WAAYhC,EACZiC,OAAO,gBAAD,OAAkBvB,EAAlB,QAJV,WAOE,kBACEwB,YAAY,mBACZC,MAAOnC,EACPoC,SAAU,SAACvB,GAAD,OAAOZ,EAASY,EAAEwB,OAAOF,MAAM1B,gBACzC6B,QAAS,SAACzB,GAAD,OAAOA,EAAEwB,OAAOE,UACzBR,MAAO,CAAE/B,MAAOA,GAChBwC,QA7EN,WACEC,UAAUC,UAAUC,UAAU3C,OA+E5B,mBAAQ+B,MAAO,CAAE/B,MAAAA,GAASwC,QAASzB,EAAnC,8BAIA,gBAAKe,UAAU,gBAAf,SACGd,EAAK4B,KAAI,SAAC5C,EAAO6C,GAAR,OACR,gBACEL,QAAS,WACPvC,EAASe,EAAK6B,IACdxB,EAAWwB,IAEbf,UAAWe,IAAU5B,EAAU,mBAAqB,YACpDc,MAAO,CAAEC,WAAYhC","sources":["pages/colorPicker.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"../styles/color.css\";\r\n\r\nexport default function Color() {\r\n  const [color, setColor] = useState(\"white\");\r\n\r\n  function genColorCode() {\r\n    let code;\r\n    do {\r\n      code = Math.floor(Math.random() * 16777216).toString(16);\r\n    } while (code.length !== 6);\r\n\r\n    return \"#\" + code.toUpperCase();\r\n  }\r\n\r\n  function copyCode() {\r\n    navigator.clipboard.writeText(color);\r\n  }\r\n\r\n  const [contOffset, setContOffset] = useState(0);\r\n  useEffect(() => {\r\n    setContOffset(document.querySelector(\".color-container\")?.offsetTop);\r\n  }, []);\r\n\r\n  function pressToGen(e) {\r\n    if (e.key === \"Enter\") {\r\n      jumpNewColor();\r\n    } else if (e.key === \"ArrowRight\") {\r\n      nextColor();\r\n    } else if (e.key === \"ArrowLeft\") {\r\n      prevColor();\r\n    }\r\n  }\r\n\r\n  //Color History\r\n  useEffect(() => {\r\n    //Add onkeydown event listener\r\n    window.addEventListener(\"keydown\", pressToGen);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", pressToGen);\r\n    };\r\n    // eslint-disable-next-line \r\n  }, []);\r\n\r\n  const [hist, setHist] = useState([]);\r\n  const [histIdx, setHistIdx] = useState(-1);\r\n\r\n  function nextColor() {\r\n    //Check if we are at the last element of \"hist\" array\r\n    //Last element, generate new color and navigate to it\r\n    if (hist.length === histIdx + 1) {\r\n      let colCode = genColorCode();\r\n      setColor(colCode);\r\n      setHist((x) => [...x, colCode]);\r\n      setHistIdx((x) => x + 1);\r\n    }\r\n    //Just navigate to the next element in hist\r\n    else {\r\n      setColor(hist[histIdx + 1]); //set color to next element\r\n      setHistIdx((x) => x + 1); //and increent index by 1\r\n    }\r\n  }\r\n\r\n  function prevColor() {\r\n    //NOT first element, we have some previous value in hist\r\n    if (histIdx > 0) {\r\n      setColor(hist[histIdx - 1]); //set color to previous element\r\n      setHistIdx((x) => x - 1); //and decrement index by 1\r\n    }\r\n  }\r\n\r\n  function jumpNewColor() {\r\n    let colCode = genColorCode();\r\n    setColor(colCode);\r\n    setHist((x) => [...x, colCode]);\r\n    setHistIdx(hist.length);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"color-container\"\r\n      style={{\r\n        background: color,\r\n        height: `calc(100vh - ${contOffset}px)`,\r\n      }}\r\n    >\r\n      <input\r\n        placeholder=\"Enter color code\"\r\n        value={color}\r\n        onChange={(e) => setColor(e.target.value.toUpperCase())}\r\n        onFocus={(e) => e.target.select()}\r\n        style={{ color: color }}\r\n        onClick={copyCode}\r\n      />\r\n\r\n      <button style={{ color }} onClick={jumpNewColor}>\r\n        Generate Color!\r\n      </button>\r\n\r\n      <div className=\"colSquareCont\">\r\n        {hist.map((color, index) => (\r\n          <div\r\n            onClick={() => {\r\n              setColor(hist[index]);\r\n              setHistIdx(index);\r\n            }}\r\n            className={index === histIdx ? \"colSquare active\" : \"colSquare\"}\r\n            style={{ background: color }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Color","useState","color","setColor","genColorCode","code","Math","floor","random","toString","length","toUpperCase","contOffset","setContOffset","pressToGen","e","key","jumpNewColor","hist","histIdx","colCode","setHist","x","setHistIdx","nextColor","useEffect","document","querySelector","offsetTop","window","addEventListener","removeEventListener","className","style","background","height","placeholder","value","onChange","target","onFocus","select","onClick","navigator","clipboard","writeText","map","index"],"sourceRoot":""}