{"version":3,"file":"static/js/974.c7e0047e.chunk.js","mappings":"sMA4CA,SAASA,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QACnB,OACE,iCACE,gBAAKC,GAAG,0BACR,kBACEC,aAAa,MACbD,GAAG,aACHE,KAAK,OACLC,YAAY,aACZC,UAAW,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBP,EAAQM,SAMvD,SAASE,EAAT,GAAyD,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAClCC,EAAeH,EAASI,KAAI,SAACC,EAAMC,GAAP,OAChC,SAACC,EAAD,CAEEC,SAAUH,EACVJ,WAAYA,EACZC,WAAYA,GAHPG,EAAKb,OAMd,OAAO,oBAASA,GAAG,YAAZ,SAAyBW,IAGlC,SAASI,EAAT,GAAqD,IAArCC,EAAoC,EAApCA,SAAUP,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WACpC,OACE,qBAASO,UAAU,YAAnB,WACE,8BACE,kBACEf,KAAK,WACLgB,QAASF,EAASG,KAClBC,SAAU,kBAAMX,EAAWO,EAAShB,QAEtC,iBAAMiB,UAAU,QAChB,iBAAMA,UAAU,OAAhB,SAAwBD,EAASH,WAEnC,mBAAQI,UAAU,QAAQI,QAAS,kBAAMX,EAAWM,EAAShB,KAA7D,qBAON,MAvFA,WAEE,OAA6BsB,EAAAA,EAAAA,UAASC,KAAKC,MAAMC,aAAaC,OAAS,OAAvE,eAAOlB,EAAP,KAAiBmB,EAAjB,KA0BA,OAvBAC,EAAAA,EAAAA,YAAU,WACRH,aAAaC,MAAQH,KAAKM,UAAUrB,KACnC,CAACA,KAsBF,iBAAKS,UAAU,iBAAf,WACE,eAAIjB,GAAG,YAAP,yBACA,SAACF,EAAD,CAAWC,QAff,SAAiBM,GACfsB,EAAS,CACP,CAAE3B,GAAI8B,KAAKC,MAAOlB,KAAMR,EAAE2B,OAAOC,MAAOd,MAAM,IADxC,eAEHX,KAELH,EAAE2B,OAAOC,MAAQ,OAWf,SAAC1B,EAAD,CACEC,SAAUA,EACVC,WAzBN,SAAoBT,GAClB,IAAMkC,EAAW1B,EAASI,KAAI,SAACC,GAAD,OAC5BA,EAAKb,KAAOA,GAAZ,kBAAsBa,GAAtB,IAA4BM,MAAON,EAAKM,OAASN,KAEnDc,EAASO,IAsBLxB,WAXN,SAAoBV,GAClB2B,EAASnB,EAAS2B,QAAO,SAACtB,GAAD,OAAUA,EAAKb,KAAOA","sources":["pages/todo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"../styles/todo.css\";\r\n\r\nfunction TodoApp() {\r\n  //Initialize state from localstorage, if none, then give state an empty array\r\n  const [todoList, setTodos] = useState(JSON.parse(localStorage.todos || \"[]\"));\r\n\r\n  //Everytime todoList is updated, save to localstorage\r\n  useEffect(() => {\r\n    localStorage.todos = JSON.stringify(todoList);\r\n  }, [todoList]);\r\n\r\n  function toggleTodo(id) {\r\n    const newTodos = todoList.map((todo) =>\r\n      todo.id === id ? { ...todo, done: !todo.done } : todo\r\n    );\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  function addTodo(e) {\r\n    setTodos([\r\n      { id: Date.now(), todo: e.target.value, done: false },\r\n      ...todoList,\r\n    ]);\r\n    e.target.value = \"\";\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todoList.filter((todo) => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <h1 id=\"todoTitle\">To Do List</h1>\r\n      <TodoInput addTodo={addTodo} />\r\n      <TodoList\r\n        todoList={todoList}\r\n        toggleTodo={toggleTodo}\r\n        removeTodo={removeTodo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TodoInput({ addTodo }) {\r\n  return (\r\n    <>\r\n      <div id=\"todo-input-underline\" />\r\n      <input\r\n        autoComplete=\"off\"\r\n        id=\"todo-input\"\r\n        type=\"text\"\r\n        placeholder=\"Add To-Do!\"\r\n        onKeyDown={(e) => e.key === \"Enter\" && addTodo(e)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TodoList({ todoList, toggleTodo, removeTodo }) {\r\n  const renderedList = todoList.map((todo, index) => (\r\n    <Todo\r\n      key={todo.id}\r\n      todoItem={todo}\r\n      toggleTodo={toggleTodo}\r\n      removeTodo={removeTodo}\r\n    />\r\n  ));\r\n  return <section id=\"todo-list\">{renderedList}</section>;\r\n}\r\n\r\nfunction Todo({ todoItem, toggleTodo, removeTodo }) {\r\n  return (\r\n    <section className=\"todo-item\">\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todoItem.done}\r\n          onChange={() => toggleTodo(todoItem.id)}\r\n        />\r\n        <span className=\"cb\"></span>\r\n        <span className=\"todo\">{todoItem.todo}</span>\r\n      </label>\r\n      <button className=\"close\" onClick={() => removeTodo(todoItem.id)}>\r\n        &times;\r\n      </button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n"],"names":["TodoInput","addTodo","id","autoComplete","type","placeholder","onKeyDown","e","key","TodoList","todoList","toggleTodo","removeTodo","renderedList","map","todo","index","Todo","todoItem","className","checked","done","onChange","onClick","useState","JSON","parse","localStorage","todos","setTodos","useEffect","stringify","Date","now","target","value","newTodos","filter"],"sourceRoot":""}