{"version":3,"file":"static/js/793.57d558d4.chunk.js","mappings":"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","sources":["pages/covid.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\n\r\nexport default function Covid() {\r\n  const [covidData, setCovidData] = useState([\r\n    {\r\n      infected: 57784,\r\n      lastUpdatedAtApify: \"2020-10-01T14:45:00.000Z\",\r\n    },\r\n    {\r\n      infected: 57794,\r\n      lastUpdatedAtApify: \"2020-10-02T14:40:00.000Z\",\r\n    },\r\n  ]);\r\n  const [showLoader, setLoader] = useState(true);\r\n  const [curData, setCurData] = useState(\"infected\");\r\n\r\n  useEffect(() => {\r\n    refineGraph(covidData);\r\n    fetch(\r\n      \"https://api.apify.com/v2/datasets/suHgi59tSfu02VsRO/items?format=json&clean=1&fields=infected,lastUpdatedAtApify\"\r\n    )\r\n      .then((data) => data.json())\r\n      .then((json) => {\r\n        setCovidData(json);\r\n        refineGraph(json);\r\n        //Hide Loader\r\n        setLoader(false);\r\n      });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const refineGraph = (covidData) => {\r\n    //Make a copy of covidData\r\n    var newData = [...covidData];\r\n\r\n    //Add formatted date string\r\n    let lastCase = 0;\r\n    newData = newData.map((data, index) => {\r\n      //Create a new Date Object\r\n      const d = new Date(data.lastUpdatedAtApify.replace(/Z$/, \"\"));\r\n      let day = d.toLocaleString(\"en\", { day: \"2-digit\" });\r\n      let month = d.toLocaleString(\"en\", { month: \"2-digit\" });\r\n      let monthStr = d.toLocaleString(\"en\", { month: \"short\" });\r\n      let year = d.toLocaleString(\"en\", { year: \"numeric\" });\r\n\r\n      //Get new cases - cases today minus cases yesterday\r\n      let newCases =\r\n        index > 0 ? data.infected - newData[index - 1].infected : 0;\r\n\r\n      //Check for abnormal Data and replace it with \"lastCase\"\r\n      newCases < 1 ? (newCases = lastCase) : (lastCase = newCases);\r\n\r\n      return {\r\n        ...data,\r\n        day: day,\r\n        month: month,\r\n        monthStr: monthStr,\r\n        year: year,\r\n        dayMonth: `${day}-${monthStr}`,\r\n        dayNum: parseInt(d.toLocaleString(\"en\", { day: \"numeric\" })),\r\n        monthNum: parseInt(d.toLocaleString(\"en\", { month: \"numeric\" })),\r\n        newCases: newCases,\r\n      };\r\n    });\r\n\r\n    //Clean up the Data\r\n    //17th to 29th May is problematic, remove it. Also remove extreme values like >10k cases\r\n    newData = newData.filter(\r\n      (data) =>\r\n        (data.dayNum < 17 || data.dayNum > 29 || data.monthNum !== 5) &&\r\n        data.newCases <= 10000\r\n    );\r\n\r\n    //Remove duplicated items by DATE\r\n    let uniqueVals = [];\r\n    newData = newData.filter((data) => {\r\n      if (!uniqueVals.includes(data.dayMonth) && data.infected != null) {\r\n        uniqueVals.push(data.dayMonth);\r\n        return data;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    //Save Data\r\n    setCovidData(newData);\r\n  };\r\n\r\n  const renderBarChart = (\r\n    <BarChart data={covidData}>\r\n      <Bar dataKey={curData} stroke=\"var(--bs-teal)\" fill=\"var(--bs-teal)\" />\r\n      <XAxis stroke=\"var(--bs-gray-dark)\" dataKey=\"dayMonth\" />\r\n      <YAxis stroke=\"var(--bs-gray-dark)\" />\r\n      <Tooltip cursor={true} />\r\n    </BarChart>\r\n  );\r\n  return (\r\n    <Container>\r\n      <div\r\n        style={{\r\n          height: \"200px\",\r\n          width: \"200px\",\r\n          border: \"6px solid var(--bs-teal)\",\r\n          borderRadius: \"50%\",\r\n          margin: \"50px auto\",\r\n          userSelect: \"none\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            transform: \"translateY(5%)\",\r\n            fontWeight: \"bold\",\r\n            color: \"var(--bs-teal)\",\r\n          }}\r\n        >\r\n          <div style={{ fontSize: \"80px\" }}>\r\n            {covidData[covidData.length - 1].newCases}\r\n          </div>\r\n          <div style={{ fontSize: \"20px\" }}>NEW CASES</div>\r\n        </div>\r\n      </div>\r\n      {showLoader && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            gap: 10,\r\n          }}\r\n        >\r\n          <CircularProgress size={30} style={{ color: \"var(--bs-teal)\" }} />\r\n          <h1 style={{ verticalAlign: \"middle\", color: \"var(--bs-teal)\" }}>\r\n            Loading Latest Data\r\n          </h1>\r\n        </div>\r\n      )}\r\n      <h3\r\n        style={{\r\n          textAlign: \"center\",\r\n          color: \"var(--bs-info)\",\r\n          marginTop: \"25px\",\r\n        }}\r\n      >\r\n        Last Updated: {covidData[covidData.length - 1].day}{\" \"}\r\n        {covidData[covidData.length - 1].monthStr}{\" \"}\r\n        {covidData[covidData.length - 1].year}\r\n      </h3>\r\n\r\n      {!showLoader && (\r\n        <div style={{ margin: \"60px 0\" }}>\r\n          <div\r\n            style={{\r\n              color: \"var(--bs-teal)\",\r\n              textAlign: \"center\",\r\n              fontSize: \"40px\",\r\n            }}\r\n          >\r\n            {curData === \"infected\" ? \"Total Cases\" : \"New Daily Cases\"}\r\n          </div>\r\n          <ResponsiveContainer width=\"100%\" aspect={2.5}>\r\n            {renderBarChart}\r\n          </ResponsiveContainer>\r\n          <div style={{ marginTop: \"25px\" }}></div>\r\n          <Button\r\n            active={curData === \"infected\" ? true : false}\r\n            variant=\"outline-info\"\r\n            onClick={(x) => {\r\n              setCurData(\"infected\");\r\n              x.currentTarget.blur();\r\n              //Work around to reanimate graph\r\n              setCovidData([...covidData]);\r\n            }}\r\n          >\r\n            Total Cases\r\n          </Button>\r\n          <Button\r\n            active={curData !== \"infected\" ? true : false}\r\n            variant=\"outline-info\"\r\n            onClick={(x) => {\r\n              setCurData(\"newCases\");\r\n              x.currentTarget.blur();\r\n              //Work around to reanimate graph\r\n              setCovidData([...covidData]);\r\n            }}\r\n          >\r\n            New Daily Cases\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["Covid","_useState","useState","infected","lastUpdatedAtApify","_useState2","_slicedToArray","covidData","setCovidData","_useState3","_useState4","showLoader","setLoader","_useState5","_useState6","curData","setCurData","useEffect","refineGraph","fetch","then","data","json","newData","_toConsumableArray","lastCase","map","index","d","Date","replace","day","toLocaleString","month","monthStr","year","newCases","_objectSpread","dayMonth","concat","dayNum","parseInt","monthNum","filter","uniqueVals","includes","push","renderBarChart","_jsxs","BarChart","children","_jsx","Bar","dataKey","stroke","fill","XAxis","YAxis","Tooltip","cursor","Container","style","height","width","border","borderRadius","margin","userSelect","textAlign","transform","fontWeight","color","fontSize","length","display","justifyContent","alignItems","gap","CircularProgress","size","verticalAlign","marginTop","ResponsiveContainer","aspect","Button","active","variant","onClick","x","currentTarget","blur"],"sourceRoot":""}